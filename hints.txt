
Hints: 1
Consider use range(#begin, #end) method


Hints: 2
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 3
In case of input data being supplied to the Q, it should be assumed to be a console input.
Consider use dict()


Hints: 4
In case of input data being supplied to the Q, it should be assumed to be a console input.
tuple() method can convert list to tuple


Hints: 5
Use __init__ method to construct some parameters


Hints: 6
If the output received is in decimal form, it should be rounded off to its nearest value (for example, if the output received is 26.0, it should be printed as 26)
In case of input data being supplied to the Q, it should be assumed to be a console input. 


Hints: 7
Note: In case of input data being supplied to the Q, it should be assumed to be a console input in a comma-separated form.


Hints: 8
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 9
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 10
In case of input data being supplied to the Q, it should be assumed to be a console input.
We use set container to remove duplicated data automatically and then use sorted() to sort the data.


Hints: 11
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 12
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 13
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 14
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 15
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 16
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 17
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 18
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 19
In case of input data being supplied to the Q, it should be assumed to be a console input.
We use itemgetter to enable multiple sort keys.


Hints: 20
Consider use yield


Hints: 21
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 22
In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 23
    Using the ** operator


Hints: 24
    The built-in document method is __doc__


Hints: 25
    Define a instance parameter, need add it in __init__ method
    You can init a object with construct parameter or set the value later


Hints: 26
Define a function with two numbers as arguments. You can compute the sum in the function and return the value.


Hints: 27

Use str() to convert a number to string.


Hints: 28

Use str() to convert a number to string.


Hints: 29

Use int() to convert a string to integer.


Hints: 30

Use + to concatenate the strings


Hints: 31

Use len() function to get the length of a string


Hints: 32

Use % operator to check if a number is even or odd.


Hints: 33

Use dict[key]=value pattern to put entry into a dictionary.
Use ** operator to get power of a number.


Hints: 34

Use dict[key]=value pattern to put entry into a dictionary.
Use ** operator to get power of a number.
Use range() for loops.


Hints: 35

Use dict[key]=value pattern to put entry into a dictionary.
Use ** operator to get power of a number.
Use range() for loops.
Use keys() to iterate keys in the dictionary. Also we can use item() to get key/value pairs.


Hints: 36

Use dict[key]=value pattern to put entry into a dictionary.
Use ** operator to get power of a number.
Use range() for loops.
Use keys() to iterate keys in the dictionary. Also we can use item() to get key/value pairs.


Hints: 37

Use ** operator to get power of a number.
Use range() for loops.
Use list.append() to add values into a list.


Hints: 38

Use ** operator to get power of a number.
Use range() for loops.
Use list.append() to add values into a list.
Use [n1:n2] to slice a list


Hints: 39

Use ** operator to get power of a number.
Use range() for loops.
Use list.append() to add values into a list.
Use [n1:n2] to slice a list


Hints: 40

Use ** operator to get power of a number.
Use range() for loops.
Use list.append() to add values into a list.
Use [n1:n2] to slice a list


Hints: 41

Use ** operator to get power of a number.
Use range() for loops.
Use list.append() to add values into a list.
Use tuple() to get a tuple from a list.


Hints: 42

Use [n1:n2] notation to get a slice from a tuple.


Hints: 43

Use "for" to iterate the tuple
Use tuple() to generate a tuple from a list.


Hints: 44

Use if statement to judge condition.


Hints: 45

Use filter() to filter some elements in a list.
Use lambda to define anonymous functions.


Hints: 46

Use map() to generate a list.
Use lambda to define anonymous functions.


Hints: 47

Use map() to generate a list.
Use filter() to filter elements of a list.
Use lambda to define anonymous functions.


Hints: 48

Use filter() to filter elements of a list.
Use lambda to define anonymous functions.


Hints: 49

Use map() to generate a list.
Use lambda to define anonymous functions.


Hints: 50

Use @staticmethod decorator to define class static method.


Hints: 51

Use class Subclass(ParentClass) to define a subclass.


Hints: 52

Use def methodName(self) to define a method.


Hints: 53

Use def methodName(self) to define a method.


Hints: 54

To override a method in super class, we can define a method with the same name in the super class.


Hints: 55

Use raise() to raise an exception.


Hints: 56

Use try/except to catch exceptions.


Hints: 57

To define a custom exception, we need to define a class inherited from Exception.


Hints: 58

Use \w to match letters.


Hints: 59

Use \w to match letters.


Hints: 60

Use re.findall() to find all substring using regex.


Hints: 61

Use u'strings' format to define unicode string.


Hints: 62

Use unicode() function to convert.


Hints: 63


Hints: 64
Use float() to convert an integer to a float


Hints: 65
We can define recursive function in Python.


Hints: 66
We can define recursive function in Python.



Hints: 67
We can define recursive function in Python.
Use list comprehension to generate a list from an existing list.
Use string.join() to join a list of strings.

In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 68
Use yield to produce the next value in generator.

In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 69
Use yield to produce the next value in generator.

In case of input data being supplied to the Q, it should be assumed to be a console input.


Hints: 70
Use "assert expression" to make assertion.



Hints: 71
Use eval() to evaluate an expression.



Hints: 72
Use if/elif to deal with conditions.



Hints: 73
Use if/elif to deal with conditions.



Hints: 74
Use random.random() to generate a random float in [0,1].



Hints: 75
Use random.random() to generate a random float in [0,1].



Hints: 76
Use random.choice() to a random element from a list.



Hints: 77
Use random.choice() to a random element from a list.



Hints: 78
Use random.sample() to generate a list of random values.



Hints: 79
Use random.sample() to generate a list of random values.



Hints: 80
Use random.sample() to generate a list of random values.



Hints: 81
Use random.randrange() to a random integer in a given range.



Hints: 82
Use zlib.compress() and zlib.decompress() to compress and decompress a string.



Hints: 83
Use timeit() function to measure the running time.


Hints: 84
Use shuffle() function to shuffle a list.


Hints: 85
Use shuffle() function to shuffle a list.


Hints: 86
Use list[index] notation to get a element from a list.


Hints: 87
Use list comprehension to delete a bunch of element from a list.


Hints: 88
Use list comprehension to delete a bunch of element from a list.


Hints: 89
Use list comprehension to delete a bunch of element from a list.
Use enumerate() to get (index, value) tuple.


Hints: 90
Use list comprehension to make an array.


Hints: 91
Use list comprehension to delete a bunch of element from a list.
Use enumerate() to get (index, value) tuple.


Hints: 92
Use list's remove method to delete a value.


Hints: 93
Use set() and "&=" to do set intersection operation.


Hints: 94
Use set() to store a number of values without duplicate.


Hints: 95
Use Subclass(Parentclass) to define a child class.


Hints: 96
Use dict to store key/value pairs.
Use dict.get() method to lookup a key with default value.


Hints: 97
Use list[::-1] to iterate a list in a reverse order.


Hints: 98
Use list[::2] to iterate a list by step 2.


Hints: 99
Use itertools.permutations() to get permutations of list.

